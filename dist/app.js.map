{"version":3,"file":"app.js","sources":["app.js"],"sourcesContent":["class ContactAPI{\r\n    static API = 'https://6425946c9e0a30d92b361db3.mockapi.io/API/todoAPI/'\r\n\r\n    static getList(){\r\n        return ContactAPI.request('GET', '')\r\n    }\r\n\r\n    static create(contact) {\r\n        return ContactAPI.request('POST', '', contact)\r\n    }\r\n\r\n    static update (id, changes) {\r\n        return ContactAPI.request('PUT', id, changes)\r\n    }\r\n    \r\n    static delete(id) {\r\n        return ContactAPI.request('DELETE', id)\r\n    }\r\n\r\n    static request(method, url, body){\r\n        return fetch(ContactAPI.API + url, {\r\n            method: method,\r\n            body: body ? JSON.stringify(body) : undefined,\r\n            headers: {\r\n              'Content-type': 'application/json',\r\n            }\r\n        })\r\n        .then((response) => {\r\n            if (response.ok) return response.json()\r\n            switch (method) {\r\n                case 'POST':\r\n                    throw new Error(\"Can't create contact on server!\")\r\n                case 'PUT':\r\n                    throw new Error(\"Can't update contact on server!\")\r\n                case 'DELETE':\r\n                    throw new Error(\"Can't delete contact from server!\")\r\n                case 'GET':\r\n                    throw new Error(\"Can't load data from server!\")\r\n            }\r\n        })\r\n    }\r\n}\nclass ContactList{\r\n    #contactList = []\r\n\r\n    fetchList() {\r\n        return ContactAPI.getList()\r\n        .then((data) => {\r\n            this.#contactList = data\r\n        })\r\n    }  \r\n\r\n    createListItem(contact) {\r\n        return ContactAPI.create(contact)\r\n        .then((contact) => {\r\n            this.addContact(contact)\r\n            return contact\r\n        })\r\n    }\r\n\r\n    deleteListItem(id) {\r\n        return ContactAPI.delete(id)\r\n        .then(() => {\r\n            this.deleteContact(id)\r\n        })\r\n    }\r\n\r\n    updateListItem(id, newContact) {\r\n        return ContactAPI.update(id, newContact)\r\n        .then((newContact) => {\r\n            this.editContact(id, newContact)\r\n            return newContact\r\n        })\r\n    }\r\n\r\n    findListItemByID(id) {\r\n        return this.#contactList.find(contact => contact.id === id)\r\n    }\r\n\r\n    getContactList() {\r\n        return this.#contactList\r\n    }\r\n\r\n    addContact(contact) {\r\n        this.#contactList.push(contact)\r\n    }\r\n\r\n    deleteContact(id) {\r\n        const idInList = this.#contactList.indexOf(this.findListItemByID(id))\r\n\r\n        this.#contactList.splice(idInList, 1)\r\n    }\r\n\r\n    editContact(id, newContact) {\r\n        const number = this.#contactList.indexOf(this.findListItemByID(id))\r\n        \r\n        this.#contactList.splice(number, 1, newContact)\r\n    }\r\n}\nclass ContactForm{\r\n    static ID_FORM = '#contactForm'\r\n\r\n    constructor (root, options){\r\n        this.createForm(root)\r\n        this.options = options\r\n        this.form = this.findForm()\r\n        this.form.addEventListener('submit', this.onFormSubmit.bind(this))\r\n    }\r\n\r\n    createForm(root) {        \r\n        root.insertAdjacentHTML('beforeend', `\r\n            <form id=\"contactForm\" class=\"main-form\" action=\"\" method=\"post\">\r\n                <input id=\"inputName\" class=\"main-table__input\" type=\"text\" placeholder=\"Введите Имя\"/>\r\n                <input id=\"inputSurname\" class=\"main-table__input\" type=\"text\" placeholder=\"Введите Фамилию\"/>\r\n                <input id=\"inputPhone\" class=\"main-table__input\" type=\"text\" placeholder=\"Введите номер телефона\"/>\r\n                <input id=\"id\" class=\"main-table__input\" type=\"hidden\"/>\r\n                <button class=\"main-table__submit\" id=\"submitButton\">Добавить</button>\r\n            </form>\r\n        `)\r\n    }\r\n\r\n    onFormSubmit(e){\r\n        e.preventDefault()  \r\n          \r\n        const contact = this.getData()\r\n        this.clearForm()\r\n        this.form.inputName.focus()\r\n    \r\n        if(!this.isDataValid(contact)){\r\n            Controller.showError(new Error('Введенные данные не валидны!'))\r\n            return\r\n        }\r\n\r\n        this.options.onSubmit(contact)    \r\n    }\r\n\r\n    getData(){\r\n        return {\r\n            id: this.form.id.value,\r\n            name: this.form.inputName.value,\r\n            surname: this.form.inputSurname.value,\r\n            phone: this.form.inputPhone.value,\r\n        }\r\n    }\r\n\r\n    fillForm(contact){\r\n        this.form.inputName.value = contact.name\r\n        this.form.inputSurname.value = contact.surname\r\n        this.form.inputPhone.value = contact.phone\r\n        this.form.id.value = contact.id\r\n    }\r\n\r\n    editContact(e){\r\n        const target = e.target\r\n        const id = findContactRow(target).dataset.id\r\n        \r\n        this.fillForm(contactList.findListItemByID(id))\r\n    }\r\n\r\n    findForm(){\r\n        return document.querySelector(ContactForm.ID_FORM)\r\n    }\r\n\r\n    isDataValid(data){\r\n        return this.isValidName(data.name) && this.isValidName(data.surname) && this.isNotEmpty(data.phone)\r\n    }\r\n\r\n    isNotEmpty(value){\r\n        return value.trim()\r\n    }\r\n\r\n    isNumber(value){\r\n        return !isNaN(value) && this.isNotEmpty(value)\r\n    }\r\n\r\n    isValidName(value){\r\n        return this.isNotEmpty(value) && !this.isNumber(value)\r\n    }\r\n\r\n    clearForm(){\r\n        this.form.reset()\r\n        this.form.id.value = ''\r\n    }\r\n}\nclass ContactTable{\r\n    static CLASS_DELETE_BTN = 'deleteBtn'\r\n    static CLASS_EDIT_BTN = 'editBtn'\r\n    static CLASS_CONTACT_ROW = '.main-table__tr'\r\n    static ID_TABLE = '#table'\r\n\r\n    constructor (root, options){\r\n        this.createTable(root)\r\n        this.table = this.findTable()\r\n        this.options = options\r\n        this.table.addEventListener('click', this.onTableClick.bind(this))\r\n    }\r\n\r\n    createTable() {\r\n        root.insertAdjacentHTML('afterbegin', `\r\n            <table id='table' class = \"main-table\">\r\n                <caption class=\"main-table__caption\">Contacts</caption>\r\n                <tr>\r\n                    <th class=\"main-table__th\">Name</th>\r\n                    <th class=\"main-table__th\">Surname</th>\r\n                    <th class=\"main-table__th\">Phone</th>\r\n                    <th class=\"main-table__th\">Actions</th>\r\n                </tr>            \r\n            </table>\r\n        `)\r\n    }\r\n\r\n    onTableClick(e){\r\n        const target = e.target\r\n        const contactRow = this.findContactRow(target)\r\n        const id = contactRow.dataset.id  \r\n\r\n        if(this.findEditButton(target)) \r\n            this.options.onEdit(id)\r\n        else if(this.findDeleteButton(target)) \r\n            this.options.onDelete(id, contactRow)\r\n    }\r\n\r\n    renderList(list){\r\n        const html = list.map(this.createTableRowWithNewData).join('')\r\n\r\n        this.table.insertAdjacentHTML('beforeend', html)\r\n    }\r\n\r\n    renderListItem(contact){\r\n        const html = this.createTableRowWithNewData(contact)\r\n\r\n        this.table.insertAdjacentHTML('beforeend', html)\r\n    }\r\n    \r\n    createTableRowWithNewData(data){\r\n        return `\r\n        <tr class='main-table__tr' data-id=${data.id}>\r\n            <td class=\"main-table__td\">\r\n                <span>${data.name}</span>\r\n            </td>\r\n            <td class=\"main-table__td\">\r\n                <span>${data.surname}</span>\r\n            </td>\r\n            <td class=\"main-table__td\">\r\n                <span>${data.phone}</span>\r\n            </td>\r\n            <td>\r\n                <button type=\"button\" class=\"editBtn\">Edit</button>\r\n                <button type=\"button\" class=\"deleteBtn\">Delete</button>\r\n            </td>\r\n        </tr>\r\n        `\r\n    }\r\n\r\n    findTable(){\r\n        return document.querySelector(ContactTable.ID_TABLE)\r\n    }\r\n\r\n    findContactRow(element){\r\n        return element.closest(ContactTable.CLASS_CONTACT_ROW)\r\n    }\r\n\r\n    replaceContactRow(id, contact){\r\n        const oldContactRow = document.querySelector(`[data-id=\"${id}\"]`)\r\n        const newContactRow = this.createTableRowWithNewData(contact)\r\n\r\n        oldContactRow.outerHTML = newContactRow\r\n    }\r\n\r\n    deleteRow(row){\r\n        row.remove()\r\n    }\r\n\r\n    findDeleteButton(target){\r\n        return target.classList.contains(ContactTable.CLASS_DELETE_BTN)\r\n    }\r\n    \r\n    findEditButton(target){\r\n        return target.classList.contains(ContactTable.CLASS_EDIT_BTN)\r\n    }\r\n}\nclass Controller{\r\n    static root = document.querySelector('#root')\r\n\r\n    constructor(root){\r\n        this.contactList = new ContactList()\r\n        this.contactForm = new ContactForm(root, { onSubmit: this.save.bind(this)})\r\n        this.contactTable = new ContactTable(root, {\r\n            onDelete: this.deleteContact.bind(this),\r\n            onEdit: (id) => {\r\n                const contact = this.contactList.findListItemByID(id)\r\n\r\n                this.contactForm.fillForm(contact)\r\n            }\r\n        })\r\n        this.contactList.fetchList().then(() => {\r\n            this.contactTable.renderList(this.contactList.getContactList())\r\n        })\r\n\r\n    }\r\n\r\n    save(contact){\r\n        if(contact.id)\r\n            this.updateContact(contact.id, contact)\r\n        else \r\n            this.createContact(contact)\r\n    }\r\n\r\n    createContact(contact){\r\n        this.contactList.createListItem(contact)\r\n            .then((contact) => {\r\n                this.contactTable.renderListItem(contact)\r\n            })\r\n            .catch((error) => {\r\n                Controller.showError(error)\r\n            })\r\n    }\r\n\r\n    updateContact(id, newContact){\r\n        this.contactList.updateListItem(id, newContact)\r\n            .then((newContact) => {\r\n                this.contactTable.replaceContactRow(id, newContact)\r\n            })\r\n            .catch((error) => {\r\n                Controller.showError(error)\r\n            })\r\n    }\r\n\r\n    deleteContact(id, contactRow){\r\n        this.contactList.deleteListItem(id)\r\n            .then(() => {\r\n                this.contactTable.deleteRow(contactRow)\r\n            })\r\n            .catch((error) => {\r\n                Controller.showError(error)\r\n            })\r\n    }\r\n\r\n    static showError(error){\r\n        alert(error.message)\r\n    }\r\n}\n'use strict'\r\n\r\nconst root = document.querySelector('#root')\r\n\r\nnew Controller(root)"],"names":["ContactAPI","API","getList","request","create","contact","update","id","changes","delete","method","url","body","fetch","JSON","stringify","undefined","headers","Content-type","then","response","ok","json","Error","ContactList","#contactList","fetchList","this","data","createListItem","addContact","deleteListItem","deleteContact","updateListItem","newContact","editContact","findListItemByID","find","getContactList","push","idInList","indexOf","splice","number","ContactForm","ID_FORM","constructor","root","options","createForm","form","findForm","addEventListener","onFormSubmit","bind","insertAdjacentHTML","e","preventDefault","getData","clearForm","inputName","focus","isDataValid","onSubmit","Controller","showError","value","name","surname","inputSurname","phone","inputPhone","fillForm","target","findContactRow","dataset","contactList","document","querySelector","isValidName","isNotEmpty","trim","isNumber","isNaN","reset","ContactTable","CLASS_DELETE_BTN","CLASS_EDIT_BTN","CLASS_CONTACT_ROW","ID_TABLE","createTable","table","findTable","onTableClick","contactRow","findEditButton","onEdit","findDeleteButton","onDelete","renderList","list","html","map","createTableRowWithNewData","join","renderListItem","element","closest","replaceContactRow","oldContactRow","newContactRow","outerHTML","deleteRow","row","remove","classList","contains","contactForm","save","contactTable","updateContact","createContact","catch","error","alert","message"],"mappings":"MAAMA,WACFC,WAAa,2DAEbC,iBACI,OAAOF,WAAWG,QAAQ,MAAO,EAAE,CACvC,CAEAC,cAAcC,GACV,OAAOL,WAAWG,QAAQ,OAAQ,GAAIE,CAAO,CACjD,CAEAC,cAAeC,EAAIC,GACf,OAAOR,WAAWG,QAAQ,MAAOI,EAAIC,CAAO,CAChD,CAEAC,cAAcF,GACV,OAAOP,WAAWG,QAAQ,SAAUI,CAAE,CAC1C,CAEAJ,eAAeO,EAAQC,EAAKC,GACxB,OAAOC,MAAMb,WAAWC,IAAMU,EAAK,CAC/BD,OAAQA,EACRE,KAAMA,EAAOE,KAAKC,UAAUH,CAAI,EAAII,KAAAA,EACpCC,QAAS,CACPC,eAAgB,kBAClB,CACJ,CAAC,EACAC,KAAK,IACF,GAAIC,EAASC,GAAI,OAAOD,EAASE,KAAK,EACtC,OAAQZ,GACJ,IAAK,OACD,MAAM,IAAIa,MAAM,iCAAiC,EACrD,IAAK,MACD,MAAM,IAAIA,MAAM,iCAAiC,EACrD,IAAK,SACD,MAAM,IAAIA,MAAM,mCAAmC,EACvD,IAAK,MACD,MAAM,IAAIA,MAAM,8BAA8B,CACtD,CACJ,CAAC,CACL,CACJ,OACMC,YACFC,aAAe,GAEfC,YACI,OAAO1B,WAAWE,QAAQ,EACzBiB,KAAK,IACFQ,KAAKF,aAAeG,CACxB,CAAC,CACL,CAEAC,eAAexB,GACX,OAAOL,WAAWI,OAAOC,CAAO,EAC/Bc,KAAK,IACFQ,KAAKG,WAAWzB,CAAO,EAChBA,EACV,CACL,CAEA0B,eAAexB,GACX,OAAOP,WAAWS,OAAOF,CAAE,EAC1BY,KAAK,KACFQ,KAAKK,cAAczB,CAAE,CACzB,CAAC,CACL,CAEA0B,eAAe1B,EAAI2B,GACf,OAAOlC,WAAWM,OAAOC,EAAI2B,CAAU,EACtCf,KAAK,IACFQ,KAAKQ,YAAY5B,EAAI2B,CAAU,EACxBA,EACV,CACL,CAEAE,iBAAiB7B,GACb,OAAOoB,KAAKF,aAAaY,KAAKhC,GAAWA,EAAQE,KAAOA,CAAE,CAC9D,CAEA+B,iBACI,OAAOX,KAAKF,YAChB,CAEAK,WAAWzB,GACPsB,KAAKF,aAAac,KAAKlC,CAAO,CAClC,CAEA2B,cAAczB,GACJiC,EAAWb,KAAKF,aAAagB,QAAQd,KAAKS,iBAAiB7B,CAAE,CAAC,EAEpEoB,KAAKF,aAAaiB,OAAOF,EAAU,CAAC,CACxC,CAEAL,YAAY5B,EAAI2B,GACNS,EAAShB,KAAKF,aAAagB,QAAQd,KAAKS,iBAAiB7B,CAAE,CAAC,EAElEoB,KAAKF,aAAaiB,OAAOC,EAAQ,EAAGT,CAAU,CAClD,CACJ,OACMU,YACFC,eAAiB,eAEjBC,YAAaC,EAAMC,GACfrB,KAAKsB,WAAWF,CAAI,EACpBpB,KAAKqB,QAAUA,EACfrB,KAAKuB,KAAOvB,KAAKwB,SAAS,EAC1BxB,KAAKuB,KAAKE,iBAAiB,SAAUzB,KAAK0B,aAAaC,KAAK3B,IAAI,CAAC,CACrE,CAEAsB,WAAWF,GACPA,EAAKQ,mBAAmB;;;;;;;;SAQvB,CACL,CAEAF,aAAaG,GACTA,EAAEC,eAAe,EAEXpD,EAAUsB,KAAK+B,QAAQ,EAC7B/B,KAAKgC,UAAU,EACfhC,KAAKuB,KAAKU,UAAUC,MAAM,EAEtBlC,KAAKmC,YAAYzD,CAAO,EAK5BsB,KAAKqB,QAAQe,SAAS1D,CAAO,EAJzB2D,WAAWC,UAAU,IAAI1C,MAAM,8BAA8B,CAAC,CAKtE,CAEAmC,UACI,MAAO,CACHnD,GAAIoB,KAAKuB,KAAK3C,GAAG2D,MACjBC,KAAMxC,KAAKuB,KAAKU,UAAUM,MAC1BE,QAASzC,KAAKuB,KAAKmB,aAAaH,MAChCI,MAAO3C,KAAKuB,KAAKqB,WAAWL,KAChC,CACJ,CAEAM,SAASnE,GACLsB,KAAKuB,KAAKU,UAAUM,MAAQ7D,EAAQ8D,KACpCxC,KAAKuB,KAAKmB,aAAaH,MAAQ7D,EAAQ+D,QACvCzC,KAAKuB,KAAKqB,WAAWL,MAAQ7D,EAAQiE,MACrC3C,KAAKuB,KAAK3C,GAAG2D,MAAQ7D,EAAQE,EACjC,CAEA4B,YAAYqB,GACFiB,EAASjB,EAAEiB,OACXlE,EAAKmE,eAAeD,CAAM,EAAEE,QAAQpE,GAE1CoB,KAAK6C,SAASI,YAAYxC,iBAAiB7B,CAAE,CAAC,CAClD,CAEA4C,WACI,OAAO0B,SAASC,cAAclC,YAAYC,OAAO,CACrD,CAEAiB,YAAYlC,GACR,OAAOD,KAAKoD,YAAYnD,EAAKuC,IAAI,GAAKxC,KAAKoD,YAAYnD,EAAKwC,OAAO,GAAKzC,KAAKqD,WAAWpD,EAAK0C,KAAK,CACtG,CAEAU,WAAWd,GACP,OAAOA,EAAMe,KAAK,CACtB,CAEAC,SAAShB,GACL,MAAO,CAACiB,MAAMjB,CAAK,GAAKvC,KAAKqD,WAAWd,CAAK,CACjD,CAEAa,YAAYb,GACR,OAAOvC,KAAKqD,WAAWd,CAAK,GAAK,CAACvC,KAAKuD,SAAShB,CAAK,CACzD,CAEAP,YACIhC,KAAKuB,KAAKkC,MAAM,EAChBzD,KAAKuB,KAAK3C,GAAG2D,MAAQ,EACzB,CACJ,OACMmB,aACFC,wBAA0B,YAC1BC,sBAAwB,UACxBC,yBAA2B,kBAC3BC,gBAAkB,SAElB3C,YAAaC,EAAMC,GACfrB,KAAK+D,YAAY3C,CAAI,EACrBpB,KAAKgE,MAAQhE,KAAKiE,UAAU,EAC5BjE,KAAKqB,QAAUA,EACfrB,KAAKgE,MAAMvC,iBAAiB,QAASzB,KAAKkE,aAAavC,KAAK3B,IAAI,CAAC,CACrE,CAEA+D,cACI3C,KAAKQ,mBAAmB;;;;;;;;;;SAUvB,CACL,CAEAsC,aAAarC,GACT,IAAMiB,EAASjB,EAAEiB,OACXqB,EAAanE,KAAK+C,eAAeD,CAAM,EACvClE,EAAKuF,EAAWnB,QAAQpE,GAE3BoB,KAAKoE,eAAetB,CAAM,EACzB9C,KAAKqB,QAAQgD,OAAOzF,CAAE,EAClBoB,KAAKsE,iBAAiBxB,CAAM,GAChC9C,KAAKqB,QAAQkD,SAAS3F,EAAIuF,CAAU,CAC5C,CAEAK,WAAWC,GACDC,EAAOD,EAAKE,IAAI3E,KAAK4E,yBAAyB,EAAEC,KAAK,EAAE,EAE7D7E,KAAKgE,MAAMpC,mBAAmB,YAAa8C,CAAI,CACnD,CAEAI,eAAepG,GACLgG,EAAO1E,KAAK4E,0BAA0BlG,CAAO,EAEnDsB,KAAKgE,MAAMpC,mBAAmB,YAAa8C,CAAI,CACnD,CAEAE,0BAA0B3E,GACtB;6CACqCA,EAAKrB;;wBAE1BqB,EAAKuC;;;wBAGLvC,EAAKwC;;;wBAGLxC,EAAK0C;;;;;;;SAQzB,CAEAsB,YACI,OAAOf,SAASC,cAAcO,aAAaI,QAAQ,CACvD,CAEAf,eAAegC,GACX,OAAOA,EAAQC,QAAQtB,aAAaG,iBAAiB,CACzD,CAEAoB,kBAAkBrG,EAAIF,GACZwG,EAAgBhC,SAASC,2BAA2BvE,KAAM,EAC1DuG,EAAgBnF,KAAK4E,0BAA0BlG,CAAO,EAE5DwG,EAAcE,UAAYD,CAC9B,CAEAE,UAAUC,GACNA,EAAIC,OAAO,CACf,CAEAjB,iBAAiBxB,GACb,OAAOA,EAAO0C,UAAUC,SAAS/B,aAAaC,gBAAgB,CAClE,CAEAS,eAAetB,GACX,OAAOA,EAAO0C,UAAUC,SAAS/B,aAAaE,cAAc,CAChE,CACJ,OACMvB,WACFjB,YAAc8B,SAASC,cAAc,OAAO,EAE5ChC,YAAYC,GACRpB,KAAKiD,YAAc,IAAIpD,YACvBG,KAAK0F,YAAc,IAAIzE,YAAYG,EAAM,CAAEgB,SAAUpC,KAAK2F,KAAKhE,KAAK3B,IAAI,CAAC,CAAC,EAC1EA,KAAK4F,aAAe,IAAIlC,aAAatC,EAAM,CACvCmD,SAAUvE,KAAKK,cAAcsB,KAAK3B,IAAI,EACtCqE,OAAQ,IACE3F,EAAUsB,KAAKiD,YAAYxC,iBAAiB7B,CAAE,EAEpDoB,KAAK0F,YAAY7C,SAASnE,CAAO,CACrC,CACJ,CAAC,EACDsB,KAAKiD,YAAYlD,UAAU,EAAEP,KAAK,KAC9BQ,KAAK4F,aAAapB,WAAWxE,KAAKiD,YAAYtC,eAAe,CAAC,CAClE,CAAC,CAEL,CAEAgF,KAAKjH,GACEA,EAAQE,GACPoB,KAAK6F,cAAcnH,EAAQE,GAAIF,CAAO,EAEtCsB,KAAK8F,cAAcpH,CAAO,CAClC,CAEAoH,cAAcpH,GACVsB,KAAKiD,YAAY/C,eAAexB,CAAO,EAClCc,KAAK,IACFQ,KAAK4F,aAAad,eAAepG,CAAO,CAC5C,CAAC,EACAqH,MAAM,IACH1D,WAAWC,UAAU0D,CAAK,CAC9B,CAAC,CACT,CAEAH,cAAcjH,EAAI2B,GACdP,KAAKiD,YAAY3C,eAAe1B,EAAI2B,CAAU,EACzCf,KAAK,IACFQ,KAAK4F,aAAaX,kBAAkBrG,EAAI2B,CAAU,CACtD,CAAC,EACAwF,MAAM,IACH1D,WAAWC,UAAU0D,CAAK,CAC9B,CAAC,CACT,CAEA3F,cAAczB,EAAIuF,GACdnE,KAAKiD,YAAY7C,eAAexB,CAAE,EAC7BY,KAAK,KACFQ,KAAK4F,aAAaP,UAAUlB,CAAU,CAC1C,CAAC,EACA4B,MAAM,IACH1D,WAAWC,UAAU0D,CAAK,CAC9B,CAAC,CACT,CAEA1D,iBAAiB0D,GACbC,MAAMD,EAAME,OAAO,CACvB,CACJ,CAGA,MAAM9E,KAAO8B,SAASC,cAAc,OAAO,EAE3C,IAAId,WAAWjB,IAAI"}